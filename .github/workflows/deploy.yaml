name: Deploy to EC2 🚀
'on':
  push:
    branches:
      - main # This triggers the workflow on push to any branch
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch ✅
        uses: actions/checkout@v2
      - name: Set up SSH key and whitelist EC2 IP address 🐻‍❄️
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      - name: Create .env file dynamically 🧨
        env:
          ENV: ${{ secrets.ENV }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          # OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # DATABASE_URL: ${{ secrets.DATABASE_URL }}
          # SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          echo "ENV=${ENV}" >> .env
          echo "EC2_USERNAME=${EC2_USERNAME}" >> .env
          echo "OPENAI_API_KEY=${OPENAI_API_KEY}" >> .env
          echo "DATABASE_URL=${DATABASE_URL}" >> .env
          echo "SECRET_KEY=${SECRET_KEY}" >> .env
      - name: Copy files to remote server 🚙
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          scp -r * $EC2_USERNAME@$EC2_HOST:/home/ubuntu/
      - name: Run Bash Script To Delpoy App 🚀
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "chmod +x ./deploy.sh && ./deploy.sh"
      - name: Clean up SSH key 🚀
        if: always()
        run: rm -f ~/.ssh/id_rsa
Resources:
  EnvironmentEC2:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      ImageId: <String>
      InstanceType: <String>
  Environment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: <String>
  ConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: <String>